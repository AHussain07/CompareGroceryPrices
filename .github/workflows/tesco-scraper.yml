name: Tesco Price Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'  # Mondays at 8 AM UTC (2 hours before Sainsbury's)

permissions:
  contents: write

jobs:
  scrape-tesco:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Shorter timeout since Tesco has fewer categories
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl unzip xvfb
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-0 libdrm2 libxkbcommon0 libgtk-3-0 libatspi2.0-0
        sudo apt-get install -y libasound2t64 libxrandr2 libpangocairo-1.0-0 libatk1.0-0 libcairo-gobject2 libgdk-pixbuf2.0-0
    
    - name: Install Chrome (version 131 - compatible with undetected_chromedriver)
      run: |
        # Remove any existing Chrome installations
        sudo apt-get remove -y google-chrome-stable google-chrome-beta google-chrome-unstable 2>/dev/null || true
        
        # Install Chrome version 131 specifically (compatible with undetected_chromedriver v139 logic)
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        
        # Install specific Chrome version that works well with undetected_chromedriver
        # We'll install the latest stable which should be compatible
        sudo apt-get install -y google-chrome-stable
        
        # Get exact Chrome version
        CHROME_VERSION=$(google-chrome --version)
        echo "Installed Chrome version: $CHROME_VERSION"
        
        # Ensure Chrome binary is accessible
        which google-chrome
        google-chrome --version
    
    - name: Prepare undetected_chromedriver environment
      run: |
        # Create directories that undetected_chromedriver expects
        mkdir -p ~/.local/share/undetected_chromedriver
        
        # Set permissions
        chmod -R 755 ~/.local/share/undetected_chromedriver
        
        # Remove any conflicting ChromeDriver installations
        sudo rm -f /usr/local/bin/chromedriver /usr/bin/chromedriver 2>/dev/null || true
        
        # Let undetected_chromedriver handle the driver download
        echo "Environment prepared for undetected_chromedriver to manage ChromeDriver"
    
    - name: Install Python dependencies
      run: |
        cd WebScrape
        pip install --upgrade pip
        
        # Install requirements with specific versions
        pip install -r requirements.txt
        
        # Also install some additional packages that might help with undetected_chromedriver
        pip install --upgrade undetected-chromedriver
        
        echo "Installed packages:"
        pip list | grep -E "(selenium|pandas|undetected|psutil|beautifulsoup|lxml|requests)"
        
        # Verify undetected_chromedriver can import
        python -c "import undetected_chromedriver as uc; print('✅ undetected_chromedriver imported successfully')"
    
    - name: Create public directory
      run: mkdir -p app/public
    
    - name: Test Chrome and ChromeDriver setup
      run: |
        cd WebScrape
        echo "Running Chrome/ChromeDriver compatibility test..."
        
        # Set environment variables
        export DISPLAY=:99
        export CHROME_BIN="/usr/bin/google-chrome"
        
        # Start virtual display for testing
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        
        # Run our test script
        python test_chrome_setup.py
    
    - name: Run Tesco scraper (unchanged)
      timeout-minutes: 85
      run: |
        cd WebScrape
        echo "🛒 Starting Tesco scraper..."
        echo "📋 Mode: Using original tesco.py (no modifications)"
        echo "🔧 Parallel processing (3 workers)"
        echo "📄 Categories: 7 main categories"
        echo "🕐 Started: $(date)"
        
        # Set display for virtual framebuffer
        export DISPLAY=:99
        
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 5
        
        # Set environment variables for undetected_chromedriver
        export PATH="/usr/bin:$PATH"
        export CHROME_BIN="/usr/bin/google-chrome"
        export CHROMEDRIVER_PATH=""  # Let undetected_chromedriver handle this
        
        # Clear any existing ChromeDriver cache to force fresh download
        rm -rf ~/.local/share/undetected_chromedriver 2>/dev/null || true
        rm -rf ~/.cache/undetected_chromedriver 2>/dev/null || true
        
        # Ensure undetected_chromedriver can write to its cache directory
        mkdir -p ~/.local/share/undetected_chromedriver
        mkdir -p ~/.cache/undetected_chromedriver
        chmod -R 755 ~/.local/share/undetected_chromedriver
        chmod -R 755 ~/.cache/undetected_chromedriver
        
        # Show Chrome version for debugging
        echo "Chrome version: $(google-chrome --version)"
        echo "Python packages:"
        pip list | grep -E "(selenium|undetected)"
        
        # Run Chrome version detection
        echo "Detailed Chrome analysis:"
        python detect_chrome_version.py
        
        # Run the original tesco.py script without modifications
        echo "Executing: python tesco.py"
        timeout 5100 python tesco.py 2>&1 | tee tesco.log
        
        echo "Tesco scraper completed at: $(date)"
    
    - name: Check results and copy CSV
      id: results
      run: |
        cd WebScrape
        
        echo "Checking for output files..."
        ls -la *.csv 2>/dev/null || echo "No CSV files found"
        
        if [ -f "tesco.csv" ]; then
          echo "✅ Found tesco.csv"
          
          # Copy to public directory
          cp tesco.csv ../app/public/
          echo "✅ Copied to app/public/"
          
          # Get detailed stats
          total_lines=$(wc -l < tesco.csv)
          product_count=$((total_lines - 1))
          file_size=$(ls -lh tesco.csv | awk '{print $5}')
          
          echo "📊 Results:"
          echo "- Products: $product_count"
          echo "- File size: $file_size"
          echo "- Total lines: $total_lines"
          
          # Check if we actually got products
          if [ $product_count -gt 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "product_count=$product_count" >> $GITHUB_OUTPUT
            
            # Show sample products
            echo ""
            echo "📋 Sample products (first 5):"
            head -6 tesco.csv | tail -5
            
            # Show category breakdown
            echo ""
            echo "📊 Categories with products:"
            tail -n +2 tesco.csv | cut -d',' -f1 | sort | uniq -c | sort -nr | head -10
            
            # Show performance stats from log
            echo ""
            echo "📊 Performance stats:"
            grep -E "Total products:|Total time:|Products per second:" tesco.log | tail -3
            
          else
            echo "❌ CSV file created but contains 0 products"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "product_count=0" >> $GITHUB_OUTPUT
          fi
          
        else
          echo "❌ No tesco.csv found"
          echo ""
          echo "📋 Directory contents:"
          ls -la
          echo ""
          echo "📋 Last 50 lines of log:"
          tail -50 tesco.log 2>/dev/null || echo "No log file"
          
          echo "success=false" >> $GITHUB_OUTPUT
          echo "product_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload logs and backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tesco-original-logs
        path: |
          WebScrape/tesco.log
          WebScrape/tesco.py
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Commit changes if successful
      if: steps.results.outputs.success == 'true' && steps.results.outputs.product_count > 0
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions - Tesco Original"
        
        # Add CSV file
        git add -f app/public/tesco.csv
        
        if ! git diff --staged --quiet; then
          echo "📝 Committing changes..."
          
          git commit -m "🛒 Tesco price update (Original Script) - $(date -u '+%Y-%m-%d %H:%M UTC')

          Products: ${{ steps.results.outputs.product_count }}
          Store: Tesco
          Script: Original tesco.py (unmodified)
          Processing: Parallel (3 workers)
          Categories: 7 main categories
          
          Features:
          - Undetected ChromeDriver v139
          - Performance optimizations
          - Parallel processing (3 workers)
          - Comprehensive pagination
          - Data deduplication
          
          Auto-updated via GitHub Actions"
          
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ Changes pushed successfully"
        else
          echo "ℹ️ No changes to commit"
        fi
    
    - name: Summary
      if: always()
      run: |
        echo "## 🛒 Tesco Scraper Summary (Original)" >> $GITHUB_STEP_SUMMARY
        echo "**Run completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.results.outputs.success }}" == "true" ]; then
          echo "### ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Products scraped:** ${{ steps.results.outputs.product_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Script:** Original tesco.py (unmodified)" >> $GITHUB_STEP_SUMMARY
          echo "- **Processing:** Parallel (3 workers)" >> $GITHUB_STEP_SUMMARY
          echo "- **Categories:** 7 main categories" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Data committed to repository" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Scraping Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Error:** Failed to generate usable CSV file" >> $GITHUB_STEP_SUMMARY
          echo "- **Script:** Original tesco.py attempted" >> $GITHUB_STEP_SUMMARY
          echo "- **Logs:** Check uploaded artifacts for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Technical Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Driver:** Undetected ChromeDriver v139" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** Headless (GitHub Actions)" >> $GITHUB_STEP_SUMMARY
        echo "- **Processing:** Parallel with 3 workers" >> $GITHUB_STEP_SUMMARY
        echo "- **Categories:** fresh-food, bakery, frozen-food, treats-and-snacks, food-cupboard, drinks, baby-and-toddler" >> $GITHUB_STEP_SUMMARY
        echo "- **Optimizations:** Image blocking, JS disabled, performance tweaks" >> $GITHUB_STEP_SUMMARY
        echo "- **Modifications:** None - using original file" >> $GITHUB_STEP_SUMMARY
        echo "- **Timeout:** 90 minutes total" >> $GITHUB_STEP_SUMMARY