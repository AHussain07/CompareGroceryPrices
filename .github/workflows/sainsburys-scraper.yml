name: Sainsburys Price Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * 1'  # Mondays at 10 AM UTC (1 hour after Morrisons)

permissions:
  contents: write

jobs:
  scrape-sainsburys:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours for 91 categories
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get clean
        sudo apt-get update --fix-missing
        sudo apt-get install -y --fix-broken wget curl unzip xvfb
        sudo apt-get install -y --no-install-recommends libnss3-dev libatk-bridge2.0-0 libdrm2 libxkbcommon0 libgtk-3-0 libatspi2.0-0
        sudo apt-get install -y libasound2t64 libxrandr2 libpangocairo-1.0-0 libatk1.0-0 libcairo-gobject2 libgdk-pixbuf2.0-0
    
    - name: Install Chrome (stable version)
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get exact Chrome version
        CHROME_VERSION=$(google-chrome --version)
        echo "Installed Chrome version: $CHROME_VERSION"
    
    - name: Install matching ChromeDriver
      run: |
        # Get Chrome major version
        CHROME_MAJOR=$(google-chrome --version | sed 's/Google Chrome //' | cut -d'.' -f1)
        echo "Chrome major version: $CHROME_MAJOR"
        
        # Always use the Chrome for Testing API for newer versions
        echo "Getting ChromeDriver for Chrome $CHROME_MAJOR"
        LATEST_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
        echo "Using ChromeDriver version: $LATEST_VERSION"
        
        # Download and install ChromeDriver
        wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$LATEST_VERSION/linux64/chromedriver-linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Verify installation
        chromedriver --version
        echo "ChromeDriver installed successfully"
    
    - name: Install Python dependencies
      run: |
        cd WebScrape
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install undetected-chromedriver --upgrade
        pip install pandas
        
        echo "Installed packages:"
        pip list | grep -E "(selenium|pandas|beautifulsoup|undetected|lxml|requests)"
    
    - name: Simple Sainsburys optimization (sed approach)
      run: |
        cd WebScrape
        echo "Optimizing Sainsburys scraper with simple sed commands..."
        
        # Backup original
        cp sainsburys.py sainsburys.py.backup
        
        # Add headless mode if not present
        if ! grep -q "headless" sainsburys.py; then
          sed -i '/options\.add_argument('\''--disable-images'\'')/i\    options.add_argument('\''--headless'\'')' sainsburys.py
          echo "✅ Added headless mode"
        fi
        
        # Add no-sandbox if not present
        if ! grep -q "no-sandbox" sainsburys.py; then
          sed -i '/options\.add_argument('\''--disable-images'\'')/a\    options.add_argument('\''--no-sandbox'\'')' sainsburys.py
          echo "✅ Added --no-sandbox"
        fi
        
        # Add disable-dev-shm-usage if not present
        if ! grep -q "disable-dev-shm-usage" sainsburys.py; then
          sed -i '/options\.add_argument('\''--disable-images'\'')/a\    options.add_argument('\''--disable-dev-shm-usage'\'')' sainsburys.py
          echo "✅ Added --disable-dev-shm-usage"
        fi
        
        # Reduce workers to 1
        sed -i 's/max_workers=[0-9]*/max_workers=1/g' sainsburys.py
        echo "✅ Set max_workers=1"
        
        echo "✅ Sainsburys scraper optimized for GitHub Actions"
    
    - name: Create public directory
      run: mkdir -p app/public
    
    - name: Run Sainsburys scraper
      timeout-minutes: 115
      run: |
        cd WebScrape
        echo "🛒 Starting Sainsburys scraper..."
        echo "📋 Categories: 91 categories"
        echo "👥 Workers: 1 (GitHub Actions optimized)"
        echo "🕐 Started: $(date)"
        
        # Set display
        export DISPLAY=:99
        
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 5
        
        # Run scraper
        echo "Executing: python sainsburys.py"
        timeout 6600 python sainsburys.py 2>&1 | tee sainsburys.log
        
        echo "Completed: $(date)"
    
    - name: Check results and copy CSV
      id: results
      run: |
        cd WebScrape
        
        echo "Checking results..."
        ls -la *.csv 2>/dev/null || echo "No CSV files found"
        
        if [ -f "sainsburys.csv" ]; then
          echo "✅ Found sainsburys.csv"
          
          # Copy to public directory
          cp sainsburys.csv ../app/public/
          
          # Get stats
          total_lines=$(wc -l < sainsburys.csv)
          product_count=$((total_lines - 1))
          file_size=$(ls -lh sainsburys.csv | awk '{print $5}')
          
          echo "📊 Results:"
          echo "- Products: $product_count"
          echo "- File size: $file_size"
          
          # Set outputs
          echo "success=true" >> $GITHUB_OUTPUT
          echo "product_count=$product_count" >> $GITHUB_OUTPUT
          
          # Show sample
          echo "📋 Sample products:"
          head -6 sainsburys.csv | tail -5
          
        else
          echo "❌ No sainsburys.csv found"
          echo "📋 Last 30 lines of log:"
          tail -30 sainsburys.log 2>/dev/null || echo "No log file"
          
          echo "success=false" >> $GITHUB_OUTPUT
          echo "product_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload logs and backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sainsburys-logs-and-backup
        path: |
          WebScrape/sainsburys.log
          WebScrape/sainsburys.py.backup
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Commit changes if successful
      if: steps.results.outputs.success == 'true'
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions - Sainsburys"
        
        git add -f app/public/sainsburys.csv
        
        if ! git diff --staged --quiet; then
          git commit -m "🛒 Sainsburys price update - $(date -u '+%Y-%m-%d %H:%M UTC')

          Products: ${{ steps.results.outputs.product_count }}
          Store: Sainsburys (91 categories)
          Workers: 1 (GitHub Actions optimized)
          
          Auto-updated via GitHub Actions"
          
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ Changes pushed"
        else
          echo "ℹ️ No changes to commit"
        fi
    
    - name: Summary
      if: always()
      run: |
        echo "## 🛒 Sainsburys Scraper Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.results.outputs.success }}" == "true" ]; then
          echo "### ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Products:** ${{ steps.results.outputs.product_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Categories:** 91" >> $GITHUB_STEP_SUMMARY
          echo "- **Workers:** 1 (optimized)" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Error:** Check logs for details" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** Review uploaded artifacts" >> $GITHUB_STEP_SUMMARY
        fi