name: Sainsbury's Price Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * 1'  # Mondays at 10 AM UTC

permissions:
  contents: write

jobs:
  scrape-sainsburys:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl unzip xvfb
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-0 libdrm2 libxkbcommon0 libgtk-3-0 libatspi2.0-0
        sudo apt-get install -y libasound2t64 libxrandr2 libpangocairo-1.0-0 libatk1.0-0 libcairo-gobject2 libgdk-pixbuf2.0-0
    
    - name: Install Chrome (stable version)
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get exact Chrome version
        CHROME_VERSION=$(google-chrome --version)
        echo "Installed Chrome version: $CHROME_VERSION"
    
    - name: Install matching ChromeDriver
      run: |
        # Force a stable ChromeDriver version that works with both Chrome 139 and 140
        CHROMEDRIVER_VERSION="129.0.6668.89"
        echo "Using stable ChromeDriver version: $CHROMEDRIVER_VERSION"
        
        # Download and install ChromeDriver
        wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Verify installation
        chromedriver --version
        echo "ChromeDriver installed successfully"
    
    - name: Install Python dependencies
      run: |
        cd WebScrape
        pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "Installed packages:"
        pip list | grep -E "(selenium|pandas|undetected|psutil|beautifulsoup|lxml|requests)"
    
    - name: Create public directory
      run: mkdir -p app/public
    
    - name: Run Sainsbury's scraper (unchanged)
      timeout-minutes: 115
      run: |
        cd WebScrape
        echo "🛒 Starting Sainsbury's scraper..."
        echo "📋 Mode: Using original sainsburys.py (no modifications)"
        echo "🔧 Sequential processing (MAX_THREADS = 1)"
        echo "📄 All categories included"
        echo "🕐 Started: $(date)"
        
        # Set display for virtual framebuffer
        export DISPLAY=:99
        
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 5
        
        # Run the original sainsburys.py script without modifications
        echo "Executing: python sainsburys.py"
        timeout 6900 python sainsburys.py 2>&1 | tee sainsburys.log
        
        echo "Sainsbury's scraper completed at: $(date)"
    
    - name: Check results and copy CSV
      id: results
      run: |
        cd WebScrape
        
        echo "Checking for output files..."
        ls -la *.csv 2>/dev/null || echo "No CSV files found"
        
        if [ -f "sainsburys.csv" ]; then
          echo "✅ Found sainsburys.csv"
          
          # Copy to public directory
          cp sainsburys.csv ../app/public/
          echo "✅ Copied to app/public/"
          
          # Get detailed stats
          total_lines=$(wc -l < sainsburys.csv)
          product_count=$((total_lines - 1))
          file_size=$(ls -lh sainsburys.csv | awk '{print $5}')
          
          echo "📊 Results:"
          echo "- Products: $product_count"
          echo "- File size: $file_size"
          echo "- Total lines: $total_lines"
          
          # Check if we actually got products
          if [ $product_count -gt 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "product_count=$product_count" >> $GITHUB_OUTPUT
            
            # Show sample products
            echo ""
            echo "📋 Sample products (first 5):"
            head -6 sainsburys.csv | tail -5
            
            # Show category breakdown
            echo ""
            echo "📊 Categories with products:"
            tail -n +2 sainsburys.csv | cut -d',' -f1 | sort | uniq -c | sort -nr | head -10
            
            # Show performance stats from log
            echo ""
            echo "📊 Performance stats:"
            grep -E "Total products:|Total time:|Products per second:" sainsburys.log | tail -3
            
          else
            echo "❌ CSV file created but contains 0 products"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "product_count=0" >> $GITHUB_OUTPUT
          fi
          
        else
          echo "❌ No sainsburys.csv found"
          echo ""
          echo "📋 Directory contents:"
          ls -la
          echo ""
          echo "📋 Last 50 lines of log:"
          tail -50 sainsburys.log 2>/dev/null || echo "No log file"
          
          echo "success=false" >> $GITHUB_OUTPUT
          echo "product_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload logs and backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sainsburys-original-logs
        path: |
          WebScrape/sainsburys.log
          WebScrape/sainsburys.py
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Commit changes if successful
      if: steps.results.outputs.success == 'true' && steps.results.outputs.product_count > 0
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions - Sainsbury's Original"
        
        # Add CSV file
        git add -f app/public/sainsburys.csv
        
        if ! git diff --staged --quiet; then
          echo "📝 Committing changes..."
          
          git commit -m "🛒 Sainsbury's price update (Original Script) - $(date -u '+%Y-%m-%d %H:%M UTC')

          Products: ${{ steps.results.outputs.product_count }}
          Store: Sainsbury's
          Script: Original sainsburys.py (unmodified)
          Processing: Sequential (MAX_THREADS = 1)
          Categories: All included
          
          Features:
          - Undetected ChromeDriver
          - Enhanced cleanup and version detection
          - Duplicate detection pagination
          - Nectar price extraction
          
          Auto-updated via GitHub Actions"
          
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ Changes pushed successfully"
        else
          echo "ℹ️ No changes to commit"
        fi
    
    - name: Summary
      if: always()
      run: |
        echo "## 🛒 Sainsbury's Scraper Summary (Original)" >> $GITHUB_STEP_SUMMARY
        echo "**Run completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.results.outputs.success }}" == "true" ]; then
          echo "### ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Products scraped:** ${{ steps.results.outputs.product_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Script:** Original sainsburys.py (unmodified)" >> $GITHUB_STEP_SUMMARY
          echo "- **Processing:** Sequential (MAX_THREADS = 1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Data committed to repository" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Scraping Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Error:** Failed to generate usable CSV file" >> $GITHUB_STEP_SUMMARY
          echo "- **Script:** Original sainsburys.py attempted" >> $GITHUB_STEP_SUMMARY
          echo "- **Logs:** Check uploaded artifacts for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Technical Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Driver:** Undetected ChromeDriver" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** Headless (GitHub Actions)" >> $GITHUB_STEP_SUMMARY
        echo "- **Processing:** Sequential (no threading)" >> $GITHUB_STEP_SUMMARY
        echo "- **Categories:** All categories from original script" >> $GITHUB_STEP_SUMMARY
        echo "- **Modifications:** None - using original file" >> $GITHUB_STEP_SUMMARY
        echo "- **Timeout:** 2 hours total" >> $GITHUB_STEP_SUMMARY