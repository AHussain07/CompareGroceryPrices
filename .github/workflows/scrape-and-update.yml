name: Grocery Price Scraper - ALDI & Sainsburys

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'

permissions:
  contents: write

jobs:
  scrape-groceries:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl unzip xvfb
    
    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | sed 's/Google Chrome //' | cut -d'.' -f1)
        
        if [ "$CHROME_VERSION" -ge "115" ]; then
          LATEST_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
          wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$LATEST_VERSION/linux64/chromedriver-linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /tmp/
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        else
          DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
          wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${DRIVER_VERSION}/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
        fi
        
        sudo chmod +x /usr/local/bin/chromedriver
    
    - name: Install dependencies
      run: |
        cd WebScrape
        pip install -r requirements.txt
    
    - name: Create simple patch script
      run: |
        cd WebScrape
        cat > patch.py << 'EOF'
        # Simple Python script to enable headless mode safely
        import os
        
        # Fix ALDI
        if os.path.exists('aldi.py'):
            with open('aldi.py', 'r') as f:
                content = f.read()
            
            # Only enable headless if it's currently commented out
            if '# options.add_argument(\'--headless\')' in content:
                content = content.replace('# options.add_argument(\'--headless\')', 'options.add_argument(\'--headless\')')
                
                # Add other options after headless
                if '--no-sandbox' not in content:
                    content = content.replace(
                        'options.add_argument(\'--headless\')',
                        'options.add_argument(\'--headless\')\n    options.add_argument(\'--no-sandbox\')\n    options.add_argument(\'--disable-dev-shm-usage\')'
                    )
                
                with open('aldi.py', 'w') as f:
                    f.write(content)
                print('ALDI patched for headless mode')
        
        # Fix Sainsburys
        if os.path.exists('sainsburys.py'):
            with open('sainsburys.py', 'r') as f:
                content = f.read()
            
            # Add headless option if not present
            if '--headless' not in content and 'options.add_argument(\'--disable-images\')' in content:
                content = content.replace(
                    'options.add_argument(\'--disable-images\')',
                    'options.add_argument(\'--headless\')\n    options.add_argument(\'--disable-images\')'
                )
                
                with open('sainsburys.py', 'w') as f:
                    f.write(content)
                print('Sainsburys patched for headless mode')
        EOF
        
        python patch.py
    
    - name: Create public directory
      run: mkdir -p app/public
    
    - name: Run ALDI scraper
      timeout-minutes: 30
      continue-on-error: true
      run: |
        cd WebScrape
        echo "Starting ALDI scraper..."
        xvfb-run -a -s "-screen 0 1920x1080x24" python aldi.py > aldi.log 2>&1
        
        echo "ALDI scraper finished, checking results..."
        if [ -f "aldi.csv" ]; then
          cp aldi.csv ../app/public/
          lines=$(wc -l < aldi.csv)
          echo "✅ ALDI: Success - $lines lines"
        else
          echo "❌ ALDI: Failed"
          echo "Error log:"
          cat aldi.log | tail -20
        fi
    
    - name: Run Sainsburys scraper
      timeout-minutes: 60
      continue-on-error: true
      run: |
        cd WebScrape
        echo "Starting Sainsburys scraper..."
        xvfb-run -a -s "-screen 0 1920x1080x24" python sainsburys.py > sainsburys.log 2>&1
        
        echo "Sainsburys scraper finished, checking results..."
        if [ -f "sainsburys.csv" ]; then
          cp sainsburys.csv ../app/public/
          lines=$(wc -l < sainsburys.csv)
          echo "✅ Sainsburys: Success - $lines lines"
        else
          echo "❌ Sainsburys: Failed"
          echo "Error log:"
          cat sainsburys.log | tail -20
        fi
    
    - name: Upload logs for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scraper-logs
        path: WebScrape/*.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Check what we have
      run: |
        echo "Checking results..."
        ls -la app/public/
        
        success_count=0
        if [ -f "app/public/aldi.csv" ]; then
          echo "ALDI CSV found"
          success_count=$((success_count + 1))
        fi
        
        if [ -f "app/public/sainsburys.csv" ]; then
          echo "Sainsburys CSV found" 
          success_count=$((success_count + 1))
        fi
        
        echo "Success count: $success_count"
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
    
    - name: Commit changes if any
      if: env.success_count > '0'
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        
        git add -f app/public/*.csv 2>/dev/null || true
        
        if ! git diff --staged --quiet; then
          git commit -m "Update grocery prices $(date -u '+%Y-%m-%d %H:%M')"
          git push origin HEAD:${{ github.ref_name }}
          echo "Changes committed"
        else
          echo "No changes to commit"
        fi