name: Weekly Grocery Price Update

on:
  schedule:
    - cron: '0 8 * * 1'
  workflow_dispatch:

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl unzip xvfb libnss3-dev libxi6 libxrandr2 libasound2-dev libpangocairo-1.0-0 libatk1.0-0 libcairo-gobject2 libgtk-3-0 libgdk-pixbuf2.0-0
    
    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3 | cut -d'.' -f1)
        DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${DRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
    
    - name: Install Python dependencies
      run: |
        cd WebScrape
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create patch script
      run: |
        cd WebScrape
        cat > patch.py << 'PATCHEOF'
        import os
        import re
        
        files = ['aldi.py', 'tesco.py', 'sainsburys.py', 'morrisons.py', 'asda.py']
        
        for file in files:
            if os.path.exists(file):
                with open(file, 'r') as f:
                    content = f.read()
                
                original = content
                
                if 'uc.ChromeOptions()' in content:
                    if '--headless' not in content:
                        content = content.replace('uc.ChromeOptions()', 'uc.ChromeOptions()\n    options.add_argument("--headless")\n    options.add_argument("--no-sandbox")\n    options.add_argument("--disable-dev-shm-usage")')
                
                if 'max_workers=' in content:
                    content = re.sub(r'max_workers=\d+', 'max_workers=1', content)
                
                if content != original:
                    with open(file, 'w') as f:
                        f.write(content)
                    print(f'Patched {file}')
        PATCHEOF
        
        python patch.py
    
    - name: Create directories
      run: mkdir -p app/public
    
    - name: Run ALDI scraper
      timeout-minutes: 25
      continue-on-error: true
      run: |
        cd WebScrape
        xvfb-run -a python aldi.py
        if [ -f "aldi.csv" ]; then
          cp aldi.csv ../app/public/
        fi
    
    - name: Run Tesco scraper
      timeout-minutes: 45
      continue-on-error: true
      run: |
        cd WebScrape
        xvfb-run -a python tesco.py
        if [ -f "tesco.csv" ]; then
          cp tesco.csv ../app/public/
        fi
    
    - name: Run Sainsburys scraper
      timeout-minutes: 60
      continue-on-error: true
      run: |
        cd WebScrape
        xvfb-run -a python sainsburys.py
        if [ -f "sainsburys.csv" ]; then
          cp sainsburys.csv ../app/public/
        fi
    
    - name: Run Morrisons scraper
      timeout-minutes: 25
      continue-on-error: true
      run: |
        cd WebScrape
        xvfb-run -a python morrisons.py
        if [ -f "morrisons.csv" ]; then
          cp morrisons.csv ../app/public/
        fi
    
    - name: Run ASDA scraper
      timeout-minutes: 40
      continue-on-error: true
      run: |
        cd WebScrape
        xvfb-run -a python asda.py
        if [ -f "asda.csv" ]; then
          cp asda.csv ../app/public/
        fi
    
    - name: Count results
      id: results
      run: |
        count=0
        for store in aldi tesco sainsburys morrisons asda; do
          if [ -f "app/public/${store}.csv" ]; then
            count=$((count + 1))
          fi
        done
        echo "count=${count}" >> $GITHUB_OUTPUT
    
    - name: Commit changes
      if: steps.results.outputs.count > '0'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/public/*.csv
        git commit -m "Update grocery prices" || exit 0
        git push